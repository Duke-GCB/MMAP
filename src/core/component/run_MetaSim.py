"""
Created on May 30, 2012
@author: Erin McKenney
"""
from Bio import SeqIO

from core.component.run_component import RunComponent
from core.run_ext_prog import runExtProg

# Full command-line sequence will read as
# ./MetaSim cmd -mg /path.mconf -r### /path.mprf -d /path/output_directory
# <run MetaSim in command mode>
# <use empirical model with specified config file --> alternately, -4 --454 error model>
# <generate ### reads>
# <using specified taxon file or single genome seq in FASTA format>
# <specify output directory>
METASIM = "./MetaSim\ cmd" # .MetaSim cmd
MODEL_INFILE_POSITION = 1
NO_READS_POSITION = 2
TAXON_INFILE_POSITION = 3
OUTFILE_DIRECTORY_POSITION = 4

ALL_EXTS = [".fna"]

class RunMetaSim(RunComponent):
    """
    classdocs
    """

    def __init__(self, model_infile, no_reads, taxon_infile, pdir, wdir=None, outfile=None, check_exist=True):
        """
        Constructor
        """
        self.all_exts = ALL_EXTS
        self.parameter_check(pdir, wdir, model_infile, no_reads, taxon_infile, outfile, check_exist, "_out")
        self.metasim = runExtProg(METASIM, pdir=self.pdir, length=4, check_OS=True)
        self.init_prog()

    @classmethod
    def create_metasim(cls, setting):
        """
        Class method
        Create RunGlimmer from dict()
        """
        metasim = cls(model_infile=setting.get("metasim_model_infile"),
            taxon_infile=setting.get("metasim_taxon_infile"),
            pdir=setting.get("metasim_pdir"),
            wdir=setting.get("wdir"),
            outfile=setting.get("metasim_outfile"),
            check_exist=setting.get("check_exist"))
        return metasim

    @classmethod
    def create_metasim_from_setting(cls, setting_class):
        """
        Class method
        Create RunGlimmer from Setting class
        """
        setting = setting_class.get_all_par("metasim")
        metasim = RunMetaSim.create_metasim(setting)
        return metasim

    def init_prog(self, no_reads):
        self.set_model_infile_name(self.model_infile)
        self.set_taxon_infile_name(self.taxon_infile)
        self.set_outfile(self.outfile)
        self.set_number_of_reads(no_reads)

    def set_number_of_reads(self, param):
        if param > 0 and isinstance(param, (int, long)):
            self.metasim.set_param_at(param, NO_READS_POSITION)
        else:
            raise TypeError("Error: unacceptable value for param: %s" % param)

#        TODO: if NONE, set to default # of reads
#        presumably in setting.py


    def set_model_infile_name(self, infile):
        """
        type anything here
        TODO: check valid infile, infile exist or not
        """
        self.metasim.set_param_at(infile, MODEL_INFILE_POSITION)


    def set_taxon_infile_name(self, infile):
        """
        type anything here
        TODO: check valid infile, infile exist or not
        """
        self.metasim.set_param_at(infile, TAXON_INFILE_POSITION)

    def set_outfile(self, outfile):
        self.metasim.set_param_at(outfile, OUTFILE_DIRECTORY_POSITION)

    def read_outfile(self):
        """
        use SeqIO.index(file, "fast") to read the result seq file,
        generated from ./finalize
        TODO: check outfile exist, properly generated by ./finalize
        """
        self.record_index = SeqIO.index(self.outfile, "fasta")
        return self.record_index

    def run(self):
        self.metasim.run()
